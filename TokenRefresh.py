#A big thank you to @mohammadaskar2 for helping speak parseltongue!
#Also a big shout out to Parsia (@CryptoGangsta) for their Swing in Python Burp Extensions blog
#(https://parsiya.net/blog/2019-11-04-swing-in-python-burp-extensions-part-1/)
import os
import threading
from java.lang import Short
from javax.swing import (JScrollPane, JPanel, JTextField, JLabel, JToggleButton, JCheckBox, GroupLayout, JFrame, JTextArea, JButton, JInternalFrame,ImageIcon, LayoutStyle)
from burp import IBurpExtender
from burp import IHttpListener
from burp import ISessionHandlingAction
from burp import ITab
import re
import urlparse
import base64


class BurpExtender(IBurpExtender, IHttpListener, ISessionHandlingAction, ITab):



    def getTabCaption(self):
        return "Bearer Token Refresh"

    def getUiComponent(self):
        #from NBPanel import NBPanel
        return self.panel

    # Variables to hold the tokens found so that it can be inserted in the next request
    discoveredBearerToken = ''


    def registerExtenderCallbacks(self, callbacks):
        cb(callbacks)
        # Keep a reference to our callbacks object
        self.callbacks = callbacks
        #Define items
        self.BaseVariables = JPanel()
        self.AccessToken = JLabel()
        self.ErrorRegex = JLabel()
        self.AccessTokenValue = JTextField()
        self.BearerTokenValue = JTextField()
        self.CurrentBearerTokenPane = JScrollPane()
        self.CurrentBearerTokenValue = JTextArea()
        self.BearerTokenPaneName = JLabel()
        self.AuthEndPoint = JLabel()
        self.AuthEndPointValue = JTextField()
        self.VariablesToSend = JPanel()
        self.ContentType = JLabel()
        self.UserAgent = JLabel()
        self.UserAgentValue = JTextField()
        self.ContentTypeValue = JTextField()
        self.AuthData = JLabel()
        self.IsB64 = JCheckBox()
        self.jScrollPane1 = JScrollPane()
        self.jTextArea1 = JTextArea()
        self.jScrollPane2 = JScrollPane()
        self.AuthDataValue = JTextArea()
        self.LogPanel = JPanel()
        self.LoggingWindowArea = JScrollPane()
        self.LoggingWindowPane = JTextArea()
        self.HeaderNameValue = JTextField()
        self.AuthorisationHeader = JLabel()
        self.ReplacementValue = JTextField()
        self.jLabel1 = JLabel()
        self.jScrollPane4 = JScrollPane()
        self.jTextArea2 = JTextArea()
        self.performingrefresh = False

# Image
        LogoExists = os.path.isfile("Logo.jpg")
        if LogoExists == False:
            FileContents = b''
            f = os.open("Logo.jpg", os.O_WRONLY|os.O_CREAT)
            FileContents = base64.b64decode(FileContents)
            os.write(f, FileContents)
            os.close(f)
        LogoFile = os.getcwd() + "\Logo.jpg"
        self.Wowzers = JInternalFrame()
        self.Wowzers.setFrameIcon(ImageIcon(LogoFile))
        WowzersLayout = GroupLayout(self.Wowzers.getContentPane())
        self.Wowzers.getContentPane().setLayout(WowzersLayout)
        WowzersLayout.setHorizontalGroup(
            WowzersLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 66, Short.MAX_VALUE)
        )
        WowzersLayout.setVerticalGroup(
            WowzersLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        )
        self.Wowzers.setVisible(True)

#Action buttons
        def TokenRefresh(event):
            if self.IsEnabled.isSelected():
                self.BearerRefresh()
            else:
                self.LoggingWindowPane.append('Cannot refresh token as extension currently disabled\n')

        self.TokenRefreshButton = JButton('Refresh Token', actionPerformed = TokenRefresh)

        def ClearLogWindow(event):
            self.LoggingWindowPane.setText('')

        self.ClearLogs = JButton('Clear Logs', actionPerformed = ClearLogWindow)

        def ContentTypeSwitch(event):

            if self.ContentTypeValue.isEnabled():
                self.ContentTypeValue.setEnabled(False)
            else:
                self.ContentTypeValue.setEnabled(True)

        self.ContentTypeEnabled = JCheckBox('Enabled', actionPerformed = ContentTypeSwitch)
        self.ContentTypeValue.setEnabled(False)

        def ScopeChange(event):
            if self.InScopeOnly.isSelected():
                self.InScopeOnly.setText("In Scope Only : ON")
            else:
                self.InScopeOnly.setText("In Scope Only : OFF")

        self.InScopeOnly = JToggleButton('In Scope Only : OFF', actionPerformed = ScopeChange)

        def DebugChange(event):
            if self.DebugEnabled.isSelected():
                self.DebugEnabled.setText("Disable Debugging")
            else:
                self.DebugEnabled.setText("Enable Debugging")

        self.DebugEnabled = JToggleButton('Enable Debugging', actionPerformed = DebugChange)

        def ToggleOnOff(event):
            if self.IsEnabled.isSelected():
                self.IsEnabled.setText("Stop Token Refresher")
            else:
                self.IsEnabled.setText("Start Token Refresher")

        self.IsEnabled = JToggleButton('Start Token Refresher', actionPerformed = ToggleOnOff)


        #Set text in items
        self.AccessToken.setText("Access Token Regex")
        self.ErrorRegex.setText("Bearer Token Error")
        self.AccessTokenValue.setText("access_token\\\"\\:\\\"(.*?)\\\"")
        #self.AccessTokenValue.setText("token\\\"\\:\\\"(.*?)\\\"")
        self.BearerTokenValue.setText("Unauthorized")
        self.CurrentBearerTokenValue.setColumns(20)
        self.CurrentBearerTokenValue.setRows(5)
        self.CurrentBearerTokenPane.setViewportView(self.CurrentBearerTokenValue)
        self.CurrentBearerTokenValue.setEditable(False)
        self.BearerTokenPaneName.setText("Current Bearer Token Value")
        self.AuthEndPoint.setText("Authorisation Endpoint")
        self.AuthEndPointValue.setText("https://host.com/oauth/login")
        #self.AuthEndPointValue.setText("http://127.0.0.1/api/v2/login")
        self.ContentType.setText("Content Type")
        self.UserAgent.setText("User Agent")
        self.UserAgentValue.setText("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36")
        self.ContentTypeValue.setText("application/json")
        self.AuthData.setText("Auth Data")
        self.IsB64.setText("is B64")
        self.CurrentBearerTokenValue.setText("No token currently")
        self.CurrentBearerTokenValue.setLineWrap(True)
        self.HeaderNameValue.setText("Authorization:")
        self.AuthorisationHeader.setText("Authorisation Header")
        self.ReplacementValue.setText("Authorization: Bearer [TOKEN]")
        self.jLabel1.setText("Replacement Header")
        self.jScrollPane4.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER)
        self.jTextArea2.setEditable(False)
        self.jTextArea2.setColumns(20)
        self.jTextArea2.setRows(5)
        self.jTextArea2.setText("\n    Please ensure that you have a [TOKEN] variable in your replacement header to allow the extension to be able to correctly substitute it i.e. X-AUTH-USER: [TOKEN] or ACCESS-TOKEN: \"[TOKEN]\"")
        self.jScrollPane4.setViewportView(self.jTextArea2)

        #Set positions
        BaseVariablesLayout =  GroupLayout(self.BaseVariables)
        self.BaseVariables.setLayout(BaseVariablesLayout)
        BaseVariablesLayout.setHorizontalGroup(
            BaseVariablesLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, BaseVariablesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BaseVariablesLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(self.jScrollPane4)
                    .addGroup(BaseVariablesLayout.createSequentialGroup()
                        .addGroup(BaseVariablesLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(BaseVariablesLayout.createSequentialGroup()
                                .addComponent(self.AccessToken)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(self.AccessTokenValue, GroupLayout.PREFERRED_SIZE, 237, GroupLayout.PREFERRED_SIZE))
                            .addGroup(GroupLayout.Alignment.TRAILING, BaseVariablesLayout.createSequentialGroup()
                                .addComponent(self.ErrorRegex)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(self.BearerTokenValue, GroupLayout.PREFERRED_SIZE, 237, GroupLayout.PREFERRED_SIZE))
                            .addGroup(GroupLayout.Alignment.TRAILING, BaseVariablesLayout.createSequentialGroup()
                                .addGroup(BaseVariablesLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addGroup(BaseVariablesLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(self.AuthEndPoint))
                                    .addGroup(BaseVariablesLayout.createSequentialGroup()
                                        .addGroup(BaseVariablesLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                            .addComponent(self.AuthorisationHeader)
                                            .addComponent(self.jLabel1))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(BaseVariablesLayout.createParallelGroup(GroupLayout.Alignment.LEADING, False)
                                    .addComponent(self.ReplacementValue)
                                    .addComponent(self.AuthEndPointValue, GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                                    .addComponent(self.HeaderNameValue))))
                        .addGap(18, 18, 18)
                        .addGroup(BaseVariablesLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(self.CurrentBearerTokenPane, GroupLayout.PREFERRED_SIZE, 457, GroupLayout.PREFERRED_SIZE)
                            .addComponent(self.BearerTokenPaneName))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(BaseVariablesLayout.createParallelGroup(GroupLayout.Alignment.LEADING, False)
                            .addComponent(self.TokenRefreshButton, GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                            .addComponent(self.IsEnabled, GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                            .addComponent(self.InScopeOnly, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(self.Wowzers, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        )
        BaseVariablesLayout.setVerticalGroup(
            BaseVariablesLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(BaseVariablesLayout.createSequentialGroup()
                .addGroup(BaseVariablesLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, False)
                    .addGroup(BaseVariablesLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(BaseVariablesLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(self.AccessToken)
                            .addComponent(self.AccessTokenValue, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(self.BearerTokenPaneName, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(BaseVariablesLayout.createParallelGroup(GroupLayout.Alignment.LEADING, False)
                            .addGroup(BaseVariablesLayout.createSequentialGroup()
                                .addGroup(BaseVariablesLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(self.BearerTokenValue, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(self.ErrorRegex))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(BaseVariablesLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(self.AuthEndPointValue, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(self.AuthEndPoint))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(BaseVariablesLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(self.HeaderNameValue, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(self.AuthorisationHeader))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(BaseVariablesLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(self.ReplacementValue, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(self.jLabel1)))
                            .addComponent(self.CurrentBearerTokenPane)))
                    .addGroup(BaseVariablesLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(self.IsEnabled, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(self.InScopeOnly, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(self.TokenRefreshButton)))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(self.jScrollPane4, GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE))
            .addGroup(BaseVariablesLayout.createSequentialGroup()
                      .addGap(17, 17, 17)
                      .addGroup(BaseVariablesLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(self.Wowzers)
                                .addGroup(BaseVariablesLayout.createSequentialGroup()
                                          .addComponent(self.IsEnabled, GroupLayout.PREFERRED_SIZE, 62,
                                                        GroupLayout.PREFERRED_SIZE)
                                          .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                          .addComponent(self.InScopeOnly, GroupLayout.DEFAULT_SIZE,
                                                        GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                          .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                          .addComponent(self.TokenRefreshButton)
                                          .addContainerGap())))
        )
        #Define text areas

        self.jTextArea1.setColumns(20)
        self.jTextArea1.setRows(5)
        self.jTextArea1.setEditable(False)
        self.jTextArea1.setText(
            "\nToken Refresher 2.0 by @bb_hacks\n\nBased on https://github.com/t3hbb/OAuthRenew\n\nFor more details please visit \nhttps://github.com/Cybaverse/TokenRefresh\n\n")
        self.jScrollPane1.setViewportView(self.jTextArea1)

        self.AuthDataValue.setColumns(20)
        self.AuthDataValue.setRows(5)
        self.AuthDataValue.setText("grant_type=client_credentials&client_id=CLIENTID&client_secret=CLIENTSECRET&scope=SCOPE&audience=AUDIENCE")
        self.jScrollPane2.setViewportView(self.AuthDataValue)

        VariablesToSendLayout =  GroupLayout(self.VariablesToSend)
        self.VariablesToSend.setLayout(VariablesToSendLayout)
        VariablesToSendLayout.setHorizontalGroup(
            VariablesToSendLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(VariablesToSendLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(VariablesToSendLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(self.ContentType)
                    .addComponent(self.AuthData)
                    .addComponent(self.IsB64)
                    .addComponent(self.UserAgent))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(VariablesToSendLayout.createParallelGroup(GroupLayout.Alignment.LEADING, False)
                    .addComponent(self.UserAgentValue, GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE)
                    .addGroup(VariablesToSendLayout.createParallelGroup(GroupLayout.Alignment.LEADING, False)
                        .addComponent(self.ContentTypeValue)
                        .addComponent(self.jScrollPane2, GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE)))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(self.ContentTypeEnabled)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(self.jScrollPane1, GroupLayout.PREFERRED_SIZE, 306, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        )

        VariablesToSendLayout.setVerticalGroup(
            VariablesToSendLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(VariablesToSendLayout.createSequentialGroup()
                      .addContainerGap()
                      .addGroup(VariablesToSendLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(VariablesToSendLayout.createSequentialGroup()
                                          .addGroup(
                VariablesToSendLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                .addComponent(self.UserAgent)
                .addComponent(self.UserAgentValue, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                              GroupLayout.PREFERRED_SIZE))
                                          .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                          .addGroup(
                VariablesToSendLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                .addComponent(self.ContentTypeValue, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                              GroupLayout.PREFERRED_SIZE)
                .addComponent(self.ContentType)
                .addComponent(self.ContentTypeEnabled))
                                          .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                          .addGroup(VariablesToSendLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                    .addGroup(VariablesToSendLayout.createSequentialGroup()
                                                              .addComponent(self.AuthData)
                                                              .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED,
                                                                               GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                              .addComponent(self.IsB64))
                                                    .addComponent(self.jScrollPane2, GroupLayout.DEFAULT_SIZE, 112,
                                                                  Short.MAX_VALUE)))
                                .addComponent(self.jScrollPane1))
                      .addContainerGap())
        )

        self.DebugEnabled.setText("Enable Debugging")

        self.LoggingWindowPane.setColumns(20)
        self.LoggingWindowPane.setRows(5)
        self.LoggingWindowArea.setViewportView(self.LoggingWindowPane)
        self.LoggingWindowPane.append("Loading Bearer Token Refresh Tool by @bb_hacks\nBased on https://github.com/t3hbb/OAuthRenew\nCheck for an expired bearer token and replace if required.\n\nRemember to update any necessary details in the options above!\n")

        LogPanelLayout =  GroupLayout(self.LogPanel)
        self.LogPanel.setLayout(LogPanelLayout)
        LogPanelLayout.setHorizontalGroup(
            LogPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(LogPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LogPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, False)
                    .addComponent(self.DebugEnabled, GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                    .addComponent(self.ClearLogs, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(self.LoggingWindowArea, GroupLayout.DEFAULT_SIZE, 969, Short.MAX_VALUE)
                .addContainerGap())
        )

        LogPanelLayout.setVerticalGroup(
            LogPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(LogPanelLayout.createSequentialGroup()
                      .addContainerGap()
                      .addGroup(LogPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(self.LoggingWindowArea, GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                                .addGroup(LogPanelLayout.createSequentialGroup()
                                          .addComponent(self.DebugEnabled, GroupLayout.PREFERRED_SIZE, 68,
                                                        GroupLayout.PREFERRED_SIZE)
                                          .addGap(18, 18, 18)
                                          .addComponent(self.ClearLogs, GroupLayout.PREFERRED_SIZE, 38,
                                                        GroupLayout.PREFERRED_SIZE)
                                          .addGap(0, 145, Short.MAX_VALUE)))
                      .addContainerGap())
        )

        self.panel = JPanel()
        layout = GroupLayout(self.panel)
        self.panel.setLayout(layout)
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                      .addContainerGap()
                      .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                          .addComponent(self.VariablesToSend, GroupLayout.PREFERRED_SIZE,
                                                        GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                          .addContainerGap(35, Short.MAX_VALUE))
                                .addGroup(layout.createSequentialGroup()
                                          .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                    .addComponent(self.LogPanel, GroupLayout.PREFERRED_SIZE,
                                                                  GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(self.BaseVariables, GroupLayout.PREFERRED_SIZE,
                                                                  GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                          .addGap(0, 0, Short.MAX_VALUE))))
        )
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                      .addContainerGap()
                      .addComponent(self.BaseVariables, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.PREFERRED_SIZE)
                      .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                      .addComponent(self.VariablesToSend, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.PREFERRED_SIZE)
                      .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                      .addComponent(self.LogPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.PREFERRED_SIZE)
                      .addContainerGap(24, Short.MAX_VALUE))
        )
        self._callbacks = callbacks
        self._helpers = callbacks.getHelpers()
        callbacks.setExtensionName("Token Refresher")
        callbacks.registerHttpListener(self)
        #print "Extension registered successfully."
        callbacks.addSuiteTab(self)
        return

    def processHttpMessage(self, toolFlag, messageIsRequest, currentMessage):
        # Operate on all tools other than the proxy. Comment out if you are passing stuff through from Postman or SoapUI
        #if toolFlag != self._callbacks.TOOL_PROXY:
        if self.DebugEnabled.isSelected():
            url = str(currentMessage.getUrl())
            self.LoggingWindowPane.append("URL Requested :")
            self.LoggingWindowPane.append(url)
            self.LoggingWindowPane.append("\n")
            if self._callbacks.isInScope(currentMessage.getUrl()):
                self.LoggingWindowPane.append("URL is in scope \n")
            else:
                self.LoggingWindowPane.append("URL is not in scope \n")
        if self.IsEnabled.isSelected()and ((self._callbacks.isInScope(currentMessage.getUrl()) and self.InScopeOnly.isSelected() or not self.InScopeOnly.isSelected())) :
            if self.DebugEnabled.isSelected():
                self.LoggingWindowPane.append("Processing Message \n")
            if messageIsRequest:
                #Check to see if a replacement bearer token exists
                if BurpExtender.discoveredBearerToken != '':
                    self.processRequest(currentMessage)
            else:
                self.processResponse(currentMessage)

    def processResponse(self, currentMessage):
        if self.DebugEnabled.isSelected():
            self.LoggingWindowPane.append("Response received\n")
            if self.performingrefresh == True :
                self.LoggingWindowPane.append("Performing Token Refresh\n")
            else :
                self.LoggingWindowPane.append("Not a token refresh \n")
        response = currentMessage.getResponse()
        parsedResponse = self._helpers.analyzeResponse(response)
        respBody = self._helpers.bytesToString(response[parsedResponse.getBodyOffset():])
        if self.DebugEnabled.isSelected():
            updatelog = "Response body received : " + respBody + "\n"
            self.LoggingWindowPane.append(updatelog)
        #Search body using regex from Bearer Token Error to see if token is valid
        if self.performingrefresh == False :
            BearerErrorRegex = re.compile(self.BearerTokenValue.getText())
            token = BearerErrorRegex.search(respBody)
            if token is None:
                if self.DebugEnabled.isSelected():
                    self.LoggingWindowPane.append("Bearer token is valid\n")
            else:
                if self.DebugEnabled.isSelected():
                    self.LoggingWindowPane.append("Bearer token expired - obtaining new one\n")
                self.BearerRefresh()
                if self.DebugEnabled.isSelected():
                    if BurpExtender.discoveredBearerToken != '':
                        updatelog = "New Bearer Token Acquired : ..."+BurpExtender.discoveredBearerToken+"...\n"
                        self.LoggingWindowPane.append(updatelog)
                    else:
                        self.LoggingWindowPane.append("[!] No matching token found in response. Enable logging to view full response and check your regex\n")
        else:
            AccessTokenRegex = re.compile(self.AccessTokenValue.getText())
            token = AccessTokenRegex.search(respBody)
            if token is None:
                self.LoggingWindowPane.append("[!] Unable to extract token - no regex match\n")
            else:
                BurpExtender.discoveredBearerToken = token.group(1)
                self.CurrentBearerTokenValue.text = (BurpExtender.discoveredBearerToken)
                if self.DebugEnabled.isSelected():
                    updatelog = "Discovered response : "+str(token.group(0))+"\n" + "Extracted Token : "+BurpExtender.discoveredBearerToken+"\n"
                    self.LoggingWindowPane.append(updatelog)
        self.performingrefresh = False

    def processRequest(self, currentMessage):
        request = currentMessage.getRequest()
        requestInfo = self._helpers.analyzeRequest(request)
        headers = requestInfo.getHeaders()
        requestBody = self._helpers.bytesToString(request[requestInfo.getBodyOffset():])
        #headers is an array list
        #Convert to single string to process (sorry!)
        headerStr=""
        for x in range(len(headers)):
            headerStr = headerStr + headers[x] +"\n"
        reqBody = currentMessage.getRequest()[requestInfo.getBodyOffset():]
        reqBody = self._helpers.bytesToString(request)

        updatedheaders = headerStr

        # Update Bearer token
        if self.DebugEnabled.isSelected():
            self.LoggingWindowPane.append("Replacing Bearer Token with latest obtained\n")#,BurpExtender.discoveredBearerToken #Uncomment first hash to see bearer token

        ToSub = self.HeaderNameValue.getText()
        ToSub = ToSub.strip()
        ToSub = ToSub +" .*"
        SubWith = self.ReplacementValue.getText()
        SubWith = SubWith.strip()
        SubWith = SubWith.replace("[TOKEN]", "{0}")

        updatedheaders = re.sub(ToSub, SubWith.format(BurpExtender.discoveredBearerToken), headerStr)

        #updatedheaders = re.sub(r"Authorization: .*", "Authorization: Bearer {0}".format(BurpExtender.discoveredBearerToken), headerStr)
        if self.DebugEnabled.isSelected():
            updatelog = "New headers to be transmitted : "+updatedheaders+"\n"
            self.LoggingWindowPane.append(updatelog)
        #convert headers back into a list
        headerslist = updatedheaders.splitlines()
        updatedRequest = self._helpers.buildHttpMessage(headerslist, requestBody)
        currentMessage.setRequest(updatedRequest)


    def BearerRefresh(self):
        host = self.AuthEndPointValue.getText()
        if self.DebugEnabled.isSelected():
            updatelog = "Attempting to reach " + host + " to re-authenticate\n\n"
            self.LoggingWindowPane.append(updatelog)

        path = urlparse.urlparse(host).path
        hostname = urlparse.urlparse(host).hostname
        scheme = urlparse.urlparse(host).scheme
        port = urlparse.urlparse(host).port

        headers = []
        headers.append("POST " + path + " HTTP/1.1")
        headers.append("Host: " + hostname)
        headers.append("User-Agent: " + self.UserAgentValue.getText())
        if self.ContentTypeEnabled.isSelected():
            ContentType = self.ContentTypeValue.getText()
            headers.append("Content-Type: " + ContentType)
        else:
            headers.append("Content-Type: application/x-www-form-urlencoded")
        headers.append("Connection: close")
        data = self.AuthDataValue.getText()
        if not self.IsB64.isSelected():
            pass
        else:
            data = base64.b64decode(data)
        body = self._helpers.stringToBytes(data)
        self.messagebody = self._helpers.buildHttpMessage(headers, body)
        #newRequestMessage = self._helpers.buildHttpMessage(headers, self.messagebody)
        if self.DebugEnabled.isSelected():
            self.LoggingWindowPane.append("Message built : \n")
            self.LoggingWindowPane.append(data)
        if scheme == "https" :
            ssl = True
        else:
            ssl = False
        if port == None :
            if ssl == True :
                port = 443
            else :
                port = 80
        if self.DebugEnabled.isSelected():
            updatelog = "Hostname : " + str(hostname) + ", scheme : " + str(scheme) + ", port : " + str(port) + "\n"
            self.LoggingWindowPane.append(updatelog)
        service = self._helpers.buildHttpService(hostname, port, ssl)
        if self.DebugEnabled.isSelected():
            self.LoggingWindowPane.append("Service Built \n")
            self.LoggingWindowPane.append("Passing to thread \n")
        self.performingrefresh = True
        thread1 = thread( service, self.messagebody)
        thread1.start()


class cb():

    callbacks = None

    def __init__(self, callbacks):
        cb.callbacks = callbacks
        cb.helpers = callbacks.getHelpers()

class thread(threading.Thread):
    def __init__(self, service, message):
        threading.Thread.__init__(self)
        self.service=service
        self.message=message

    def run(self):
        try:
            #print "Making request \n"
            requested = cb.callbacks.makeHttpRequest(self.service, self.message)
        except Exception as e:
            print e
        response = cb.helpers.bytesToString(requested.getResponse())
        info = cb.helpers.analyzeResponse(response)
        body = response[info.getBodyOffset():]
        return
